rm(list = ls())
library(tidyverse)
library(moments)
# Samples of input parameters
# Specify an example coefficients for mitigation cost distribution
M0 <-  0.1
alpha <-  0.5 # elasticity
atkinson_index<-0.243 # figure for China found at https://www.eugb.ge/uploads/content/N5/5-16.pdf
sigma<--2*log(1-atkinson_index)
cbar<-10**4 # for China
mu<-log(cbar)-0.5*sigma**2
#mu<-0
#cbar<-exp(mu+sigma**2/2)
#mu <- mu.lognormal(cbar,sigma)
N<-10**6
xx <- seq(-1e4,6e4,length.out = 10**4)
# coefficients for revenue redistribution:
# we have:
beta<-1
R0<-0.04
tau<-0.5
normalized_coefficient_sample<-function(sample0,elasticity,M0){
Anorm <- M0*(moment(sample0,order=1)^(elasticity))/moment(sample0,order=elasticity)
}
cost_function_sample <- function(c,alpha,M0){
A <- normalized_coefficient_sample(c,alpha,M0)
D <- A * (c/(moment(c,order=1)))^(alpha-1)
return(D)
}
lognormalMoment <- function(n,mu,sigma){
exp(n*mu + 0.5*n^2*sigma^2)
}
normalized_coefficient <- function(elasticity,M0,mu,sigma){
Anew <- M0*lognormalMoment(1,mu,sigma)^elasticity/lognormalMoment(elasticity,mu,sigma)
return(Anew)
}
cost_function <- function(c,alpha,M0,mu,sigma){
A <- normalized_coefficient(alpha,M0,mu,sigma)
#A <- normalized_coefficient_norm(cbar,alpha,M0,mu,sigma)
D <- A * (c/lognormalMoment(1,mu,sigma))^(alpha-1)
return(D)
}
samples_new <- tibble(preMitigation = rlnorm(N, meanlog = mu, sdlog = sigma),
Mitigationcosts = cost_function_sample(preMitigation,alpha,M0)*preMitigation,
postMitigation=preMitigation-Mitigationcosts,
Tax=cost_function_sample(postMitigation,alpha,R0)*postMitigation,
Rev=cost_function_sample(postMitigation,beta,R0)*postMitigation,
finalconsumption=postMitigation-Tax+Rev)
#samples_new <- tibble(preMitigation = rlnorm(N, meanlog = mu, sdlog = sigma),
#                     Mitigationcosts = cost_function(preMitigation,cbar,alpha,M0,mu,sigma)*preMitigation,
#                    postMitigation=preMitigation-Mitigationcosts,
#                   Rev=cost_function(postMitigation,cbar*(1-M0),beta,R0,mu,sigma)*postMitigation,
#                  finalconsumption=postMitigation+Rev)
#try distribution
ggplot() +
geom_histogram(aes(x = samples_new$preMitigation, y = ..density..),breaks = xx, fill = 'green', alpha = 0.3) +
geom_line(aes(x = xx, y = dlnorm(xx,mu,sigma)), linetype = 2, color = 'green4',size=1.5) +
labs(x = 'consumption pre-mitigation')
ggplot() +
geom_histogram(aes(x = samples_new$finalconsumption, y = ..density.., fill = 'final'),breaks = xx, alpha = 0.5) +
geom_line(aes(x = xx, y = dlnorm(xx,mu,sigma),color='preMitigation'), linetype = 2, size = 1) +
scale_color_manual(values=c('preMitigation' = 'green4')) +
scale_fill_manual(values=c('final' = 'red')) +
labs(x = 'consumption', fill = '',color='', y = 'probability density')
# First step: from initial distribution to postMitigation cost distribution
mean_postMitigation <- lognormalMoment(1,mu,sigma)*(1-M0)
#also
secondmom_postMitigation <- (1-(1-tau)*M0)^2 *lognormalMoment(2,mu,sigma)-
2*tau*(1-(1-tau)*M0)*M0^2*lognormalMoment(1,mu,sigma)*lognormalMoment(alpha+1,mu,sigma)/lognormalMoment(alpha,mu,sigma)+
(tau*M0*lognormalMoment(1,mu,sigma)/lognormalMoment(alpha,mu,sigma))^2 *lognormalMoment(2*alpha,mu,sigma)#+
m_postMitigation <- 2*log(mean_postMitigation) - 0.5*log(secondmom_postMitigation)
s_postMitigation <- sqrt(log(secondmom_postMitigation) - 2*log(mean_postMitigation))
# Second step: from postMitigation to final consumption
#K<-normalized_coefficient(cbar*(1-M0)*(1-R0),beta,R0,m_postMitigation,s_postMitigation)
mean_finalconsumption <- lognormalMoment(1,m_postMitigation,s_postMitigation)# +
#  K/(cbar^(beta-1))*lognormalMoment(beta,m_postMitigation,s_postMitigation)
secondmom_finalconsumption <- lognormalMoment(2,m_postMitigation,s_postMitigation)-
(2*R0*lognormalMoment(1,m_postMitigation,s_postMitigation)/lognormalMoment(alpha,m_postMitigation,s_postMitigation))*lognormalMoment(alpha+1,m_postMitigation,s_postMitigation)+
(2*R0*lognormalMoment(1,m_postMitigation,s_postMitigation)/lognormalMoment(beta,m_postMitigation,s_postMitigation))*lognormalMoment(beta+1,m_postMitigation,s_postMitigation)+
(R0*lognormalMoment(1,m_postMitigation,s_postMitigation)/lognormalMoment(alpha,m_postMitigation,s_postMitigation))^2*lognormalMoment(2*alpha,m_postMitigation,s_postMitigation)+
(R0*lognormalMoment(1,m_postMitigation,s_postMitigation)/lognormalMoment(beta,m_postMitigation,s_postMitigation))^2*lognormalMoment(2*beta,m_postMitigation,s_postMitigation)-
(2*R0^2*lognormalMoment(1,m_postMitigation,s_postMitigation)^2)/(lognormalMoment(alpha,m_postMitigation,s_postMitigation)*lognormalMoment(beta,m_postMitigation,s_postMitigation))*lognormalMoment(alpha+beta,m_postMitigation,s_postMitigation)
m <- 2*log(mean_finalconsumption) - 0.5*log(secondmom_finalconsumption)
s <- sqrt(log(secondmom_finalconsumption) - 2*log(mean_finalconsumption))
mean_finalconsumption
mean(samples_new$finalconsumption)/mean_finalconsumption
m/mu
s/sigma
if (FALSE){
mean_finalconsumption <- lognormalMoment(1,mu,sigma) -
A/(cbar^(alpha-1))*lognormalMoment(alpha,mu,sigma)+
K/(cbar^(beta-1))*lognormalMoment(beta,mu,sigma)
secondmom_finalconsumption <- lognormalMoment(2,mu,sigma)-
2*A/(cbar^(alpha-1))*lognormalMoment(alpha+1,mu,sigma)+
A^2/(cbar^(2*(alpha-1)))*lognormalMoment(2*alpha,mu,sigma)+
K^2/(cbar^(2*(beta-1)))*lognormalMoment(2*beta,mu,sigma)+
2*K/(cbar^(beta-1))*lognormalMoment(beta+1,mu,sigma)-
2*A*K/(cbar^(alpha+beta-2))*lognormalMoment(alpha+beta,mu,sigma)
}
ggplot() +
geom_histogram(aes(x = samples_new$finalconsumption, y = ..density.., fill = 'final samples'),
breaks = xx, alpha = 0.3) +
#geom_line(aes(x = xx, y = dlnorm(xx,m_nico,s_nico), color = 'analytic (nico)'), linetype = 2, size = 1.5) +
geom_line(aes(x = xx, y = dlnorm(xx,m,s), color = 'final analytic'), linetype = 2, size = 1.5) +
geom_line(aes(x = xx, y = dlnorm(xx,mu,sigma), color = 'initial distribution'), linetype = 2, size = 0.7) +
scale_color_manual(values=c('initial distribution' = 'green4', 'final analytic' = 'red','analytic (nico)'='blue')) +
scale_fill_manual(values=c('final samples' = 'red')) +
labs( fill = '',color='', x = 'consumption', y = 'probability density')
# logically s is greater than initial sigma, expect if revenues strongly proportional
mean(samples_new$finalconsumption)
mean(rlnorm(N,m,s))
# moment d ordre 2
mean(samples_new$finalconsumption**2)
mean(rlnorm(100000,m,s)**2)
var(samples_new$finalconsumption)
var(rlnorm(xx,m,s))
var(samples_new$finalconsumption)
rlnorm(N, meanlog = mu, sdlog = sigma)
var(dlnorm(xx,m,s))
ggplot() +
geom_histogram(aes(x = samples_new$finalconsumption, y = ..density.., fill = 'final samples'),
breaks = xx, alpha = 0.3) +
#geom_line(aes(x = xx, y = dlnorm(xx,m_nico,s_nico), color = 'analytic (nico)'), linetype = 2, size = 1.5) +
geom_line(aes(x = xx, y = dlnorm(xx,m,s), color = 'final analytic'), linetype = 2, size = 1.5) +
#geom_line(aes(x = xx, y = dlnorm(xx,m_2,s_2), color = 'final analytic m2'), linetype = 2, size = 1.5) +
geom_line(aes(x = xx, y = dlnorm(xx,mu,sigma), color = 'initial distribution'), linetype = 2, size = 0.7) +
scale_color_manual(values=c('initial distribution' = 'green4', 'final analytic' = 'red', 'final analytic m2' = 'blue','analytic (nico)'='blue')) +
scale_fill_manual(values=c('final samples' = 'red')) +
labs( fill = '',color='', x = 'consumption', y = 'probability density')
# manually check that we's conserving
lognormalDamage_getms <- function(alpha,beta,M0,tau,R0,mu,sigma){
mean_postMitigation <- lognormalMoment(1,mu,sigma)*(1-M0)
#also
secondmom_postMitigation <- (1-(1-tau)*M0)^2 *lognormalMoment(2,mu,sigma)-
#2*tau*(1-(1-tau)*M0)*M0^2*lognormalMoment(1,mu,sigma)*lognormalMoment(alpha+1,mu,sigma)/lognormalMoment(alpha,mu,sigma)+
2*tau*(1-(1-tau)*M0)*M0*lognormalMoment(1,mu,sigma)*lognormalMoment(alpha+1,mu,sigma)/lognormalMoment(alpha,mu,sigma)+
(tau*M0*lognormalMoment(1,mu,sigma)/lognormalMoment(alpha,mu,sigma))^2 *lognormalMoment(2*alpha,mu,sigma)#+
m_postMitigation <- 2*log(mean_postMitigation) - 0.5*log(secondmom_postMitigation)
s_postMitigation <- sqrt(log(secondmom_postMitigation) - 2*log(mean_postMitigation))
# Second step: from postMitigation to final consumption
#K<-normalized_coefficient(cbar*(1-M0)*(1-R0),beta,R0,m_postMitigation,s_postMitigation)
mean_finalconsumption <- lognormalMoment(1,m_postMitigation,s_postMitigation)# +
#  K/(cbar^(beta-1))*lognormalMoment(beta,m_postMitigation,s_postMitigation)
secondmom_finalconsumption <- lognormalMoment(2,m_postMitigation,s_postMitigation)-
(2*R0*lognormalMoment(1,m_postMitigation,s_postMitigation)/lognormalMoment(alpha,m_postMitigation,s_postMitigation))*lognormalMoment(alpha+1,m_postMitigation,s_postMitigation)+
(2*R0*lognormalMoment(1,m_postMitigation,s_postMitigation)/lognormalMoment(beta,m_postMitigation,s_postMitigation))*lognormalMoment(beta+1,m_postMitigation,s_postMitigation)+
(R0*lognormalMoment(1,m_postMitigation,s_postMitigation)/lognormalMoment(alpha,m_postMitigation,s_postMitigation))^2*lognormalMoment(2*alpha,m_postMitigation,s_postMitigation)+
(R0*lognormalMoment(1,m_postMitigation,s_postMitigation)/lognormalMoment(beta,m_postMitigation,s_postMitigation))^2*lognormalMoment(2*beta,m_postMitigation,s_postMitigation)-
(2*R0^2*lognormalMoment(1,m_postMitigation,s_postMitigation)^2)/(lognormalMoment(alpha,m_postMitigation,s_postMitigation)*lognormalMoment(beta,m_postMitigation,s_postMitigation))*lognormalMoment(alpha+beta,m_postMitigation,s_postMitigation)
m <- 2*log(mean_finalconsumption) - 0.5*log(secondmom_finalconsumption)
s <- sqrt(log(secondmom_finalconsumption) - 2*log(mean_finalconsumption))
res_tibble <- tibble(alpha = alpha, cbar = cbar, M0 = M0, mu = mu, sigma = sigma,
mean_finalconsumption = mean_finalconsumption,
secondmom_finalconsumption = secondmom_finalconsumption,
m = m,
R0=R0,
beta=beta,
s = s,
tau=tau)
return(res_tibble)
}
lognormalDamage_getms(alpha,beta,M0,tau,R0,mu,sigma)
alpha<-0.75
test_alphas <- c(1.5,1.25,1,0.75,0.5)
# test_alphas <- c(1)
test_M0<-c(0,0.05,0.1,0.20)
test_tau<-c(0.50,1)
test_R0<-c(0,0.01,0.03)
test_beta<-c(1,0)
test_values<-data.frame(expand.grid(alpha=test_alphas,beta=test_beta,M0=test_M0,tau=test_tau,R0=test_R0))
test_values<-test_values%>%
mutate(mu=mu,sigma=sigma)
table_values<-lognormalDamage_getms(alpha=test_values$alpha,
beta=test_values$beta,
M0=test_values$M0,
tau=test_values$tau,
R0=test_values$R0,
mu=test_values$mu,
sigma=test_values$sigma)
#test_params$Atkinson<-0
#can do this as long as base mu and sigma are equal
preMitigation <- rlnorm(N, meanlog = mu, sdlog = sigma)
table_values<-table_values%>%
mutate(mean_sample=0,secondmom_sample=0,Atkinson_sample=0,
Atkinson=1-exp(-0.5*s^2))
for (i in 1:nrow(table_values)){
samples_new <- tibble(preMitigation = rlnorm(N, meanlog = mu, sdlog = sigma),
Mitigationcosts = cost_function_sample(preMitigation,test_values$alpha[i],test_values$M0[i])*preMitigation,
postMitigation=preMitigation-Mitigationcosts,
Tax=cost_function_sample(postMitigation,test_values$alpha[i],test_values$R0[i])*postMitigation,
Rev=cost_function_sample(postMitigation,test_values$beta[i],test_values$R0[i])*postMitigation,
finalconsumption=postMitigation-Tax+Rev)
print(min(samples_new$finalconsumption))
table_values[[i,'mean_sample']]<-moment(samples_new$finalconsumption,order=1)
table_values[[i,'secondmom_sample']]<-moment(samples_new$finalconsumption,order=2)
table_values[[i,'Atkinson_sample']]<-1-(1/mean(samples_new$finalconsumption)*exp(mean(log(samples_new$finalconsumption))))
# take the first and second moment of the sample:
if (FALSE){
pp <- ggplot() +
geom_histogram(aes(x = samples_new$finalconsumption, y = ..density.., fill = 'final samples'),
breaks = xx, alpha = 0.3) +
geom_line(aes(x = xx, y = dlnorm(xx,table_values[[i,'m']],table_values[[i,'s']]),
color = 'final analytic'), linetype = 2, size = 1.5) +
geom_line(aes(x = xx, y = dlnorm(xx,table_values[[i,'mu']],table_values[[i,'sigma']]),
color = 'pre-mitigation'), linetype = 2, size = 0.7) +
labs(x = 'income', y = 'probability density', color = '', fill = '',
#  title = sprintf('M0 = %.2f, \u03B1 = %.2f',table_values[[i,'M0']],table_values[[i,'alpha']])) +
title = sprintf('R0 = %.2f, beta = %.2f',table_values[[i,'R0']],table_values[[i,'beta']])) +
coord_cartesian(xlim=c(-1e4,6e4), ylim=c(-0.1e-4,1.3e-4), expand = FALSE) +
scale_color_manual(values=c('pre-mitigation' = 'green4', 'final analytic' = 'red','final analytic m2' = 'blue')) +
scale_fill_manual(values=c('final samples' = 'red'))
ggsave(paste('plots/conso_full_R0',table_values[[i,'R0']],'M0',table_values[[i,'M0']],'tau',table_values[[i,'tau']],'alpha',table_values[[i,'beta']],'beta',table_values[[i,'beta']],'.png'),pp,width = 8, height = 6)
print(pp)
}
}
table_values<-table_values%>%
mutate(consoeq=mean_finalconsumption*(1-Atkinson),
consoeq_sample=mean_sample*(1-Atkinson_sample),
ratio_consoeq=100*(consoeq-consoeq_sample)/consoeq_sample,
ratio_mean=100*(mean_finalconsumption-mean_sample)/mean_sample,
ratio_secondmom=100*(secondmom_finalconsumption-secondmom_sample)/secondmom_sample,
ratio_atkinson=100*(Atkinson-Atkinson_sample)/Atkinson_sample,
)
ggplot(data=data.frame(subset(table_values)))+
facet_wrap(.~paste("Mitigation cost",M0))+
geom_point(aes(x=alpha,y=ratio_consoeq,shape=as.factor(R0),color=as.factor(tau)))+
#geom_point(aes(x=alpha,y=ratio_mean_2,shape="Mean",color="Method 2"))+
#geom_point(aes(x=alpha,y=ratio_secondmom,shape="SecondMom",color="Second"))+
theme_bw()+
labs(y='(consoeq-consoeq_sample)/consoeq_sample')
ggplot(data=data.frame(subset(table_values)))+
facet_wrap(.~paste("Mitigation cost",M0))+
geom_point(aes(x=alpha,y=ratio_consoeq,shape=as.factor(R0),color=as.factor(tau)))+
#geom_point(aes(x=alpha,y=ratio_mean_2,shape="Mean",color="Method 2"))+
#geom_point(aes(x=alpha,y=ratio_secondmom,shape="SecondMom",color="Second"))+
theme_bw()+
labs(y='(consoeq-consoeq_sample)/consoeq_sample')
ggsave("plots/sensitivity_test_consoeq.png",width = 8, height = 6)
